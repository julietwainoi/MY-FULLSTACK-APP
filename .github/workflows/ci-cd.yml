name: CI/CD Pipeline

# Trigger the workflow on pushes to the main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Define environment variables
env:
  FRONTEND_IMAGE_NAME: mydockerhubuser/myapp-frontend
  BACKEND_IMAGE_NAME: mydockerhubuser/myapp-backend
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      # Using MySQL and Redis services for testing
      db:
        image: mysql:8
        ports: ['3306:3306']
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: laravel

      redis:
        image: redis:alpine
        ports: ['6379:6379']

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Node.js for frontend
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # Cache Node.js dependencies for frontend
      - name: Cache frontend dependencies
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install frontend dependencies
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm install

      # Run frontend tests
      - name: Run frontend tests
        working-directory: frontend
        run: npm test

      # Build the frontend Docker image
      - name: Build frontend Docker image
        run: docker build -t $FRONTEND_IMAGE_NAME:latest ./frontend

      # Cache backend dependencies (Composer)
      - name: Cache backend dependencies
        uses: actions/cache@v3
        with:
          path: backend/vendor
          key: ${{ runner.os }}-php-${{ hashFiles('backend/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      # Install backend dependencies
      - name: Install backend dependencies
        working-directory: backend
        run: |
          composer install

      # Run backend tests
      - name: Run backend tests
        working-directory: backend
        run: php artisan test

      # Build the backend Docker image
      - name: Build backend Docker image
        run: docker build -t $BACKEND_IMAGE_NAME:latest ./backend

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin

      # Push frontend and backend Docker images to Docker Hub
      - name: Push frontend Docker image
        run: docker push $FRONTEND_IMAGE_NAME:latest

      - name: Push backend Docker image
        run: docker push $BACKEND_IMAGE_NAME:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa user@yourserver.com "
            docker pull $FRONTEND_IMAGE_NAME:latest &&
            docker pull $BACKEND_IMAGE_NAME:latest &&
            docker stop frontend || true &&
            docker stop backend || true &&
            docker run -d --name frontend -p 80:3000 $FRONTEND_IMAGE_NAME:latest &&
            docker run -d --name backend -p 8000:80 --link db:mysql --link redis:redis $BACKEND_IMAGE_NAME:latest
          "
